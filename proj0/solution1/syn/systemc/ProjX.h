// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ProjX_HH_
#define _ProjX_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "jet_hw_mul_mul_16ns_16ns_32_1_1.h"
#include "ProjX_cos_table1.h"

namespace ap_rtl {

struct ProjX : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<16> > pt_V;
    sc_in< sc_lv<11> > phi_V;
    sc_out< sc_lv<17> > ap_return;


    // Module declarations
    ProjX(sc_module_name name);
    SC_HAS_PROCESS(ProjX);

    ~ProjX();

    sc_trace_file* mVcdFile;

    ProjX_cos_table1* cos_table1_U;
    jet_hw_mul_mul_16ns_16ns_32_1_1<1,1,16,16,32>* jet_hw_mul_mul_16ns_16ns_32_1_1_U1;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > cos_table1_address0;
    sc_signal< sc_logic > cos_table1_ce0;
    sc_signal< sc_lv<16> > cos_table1_q0;
    sc_signal< sc_lv<16> > pt_V_read_reg_185;
    sc_signal< sc_lv<16> > pt_V_read_reg_185_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln891_fu_75_p2;
    sc_signal< sc_lv<1> > icmp_ln891_reg_190;
    sc_signal< sc_lv<1> > icmp_ln891_reg_190_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln891_reg_190_pp0_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln887_fu_136_p2;
    sc_signal< sc_lv<1> > icmp_ln887_reg_200;
    sc_signal< sc_lv<1> > icmp_ln887_reg_200_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln887_reg_200_pp0_iter2_reg;
    sc_signal< sc_lv<16> > cos_table1_load_reg_205;
    sc_signal< sc_lv<16> > tmp_reg_210;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln544_fu_131_p1;
    sc_signal< sc_lv<3> > tmp_34_fu_65_p4;
    sc_signal< sc_lv<8> > phiQ1_V_fu_61_p1;
    sc_signal< sc_lv<8> > phiQ1_V_4_fu_81_p2;
    sc_signal< sc_lv<8> > phiQ1_V_5_fu_87_p3;
    sc_signal< sc_lv<1> > icmp_ln891_2_fu_103_p2;
    sc_signal< sc_lv<8> > phiQ1_V_6_fu_109_p2;
    sc_signal< sc_lv<1> > tmp_35_fu_95_p3;
    sc_signal< sc_lv<8> > select_ln74_fu_115_p3;
    sc_signal< sc_lv<8> > select_ln887_fu_123_p3;
    sc_signal< sc_lv<32> > ret_V_fu_178_p2;
    sc_signal< sc_lv<17> > zext_ln1503_fu_157_p1;
    sc_signal< sc_lv<1> > or_ln80_fu_160_p2;
    sc_signal< sc_lv<17> > sub_ln68_fu_164_p2;
    sc_signal< sc_lv<16> > ret_V_fu_178_p0;
    sc_signal< sc_lv<16> > ret_V_fu_178_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to2;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > ret_V_fu_178_p00;
    sc_signal< sc_lv<32> > ret_V_fu_178_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<11> ap_const_lv11_6FF;
    static const sc_lv<11> ap_const_lv11_700;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<17> ap_const_lv17_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to2();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_cos_table1_address0();
    void thread_cos_table1_ce0();
    void thread_icmp_ln887_fu_136_p2();
    void thread_icmp_ln891_2_fu_103_p2();
    void thread_icmp_ln891_fu_75_p2();
    void thread_or_ln80_fu_160_p2();
    void thread_phiQ1_V_4_fu_81_p2();
    void thread_phiQ1_V_5_fu_87_p3();
    void thread_phiQ1_V_6_fu_109_p2();
    void thread_phiQ1_V_fu_61_p1();
    void thread_ret_V_fu_178_p0();
    void thread_ret_V_fu_178_p00();
    void thread_ret_V_fu_178_p1();
    void thread_ret_V_fu_178_p10();
    void thread_select_ln74_fu_115_p3();
    void thread_select_ln887_fu_123_p3();
    void thread_sub_ln68_fu_164_p2();
    void thread_tmp_34_fu_65_p4();
    void thread_tmp_35_fu_95_p3();
    void thread_zext_ln1503_fu_157_p1();
    void thread_zext_ln544_fu_131_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
