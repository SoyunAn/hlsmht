// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ProjY (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        pt_V,
        phi_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] pt_V;
input  [10:0] phi_V;
output  [16:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] sin_table2_address0;
reg    sin_table2_ce0;
wire   [15:0] sin_table2_q0;
reg   [15:0] pt_V_read_reg_172;
reg   [15:0] pt_V_read_reg_172_pp0_iter1_reg;
wire   [0:0] tmp_33_fu_93_p3;
reg   [0:0] tmp_33_reg_177;
reg   [0:0] tmp_33_reg_177_pp0_iter1_reg;
reg   [0:0] tmp_33_reg_177_pp0_iter2_reg;
reg   [15:0] sin_table2_load_reg_187;
reg   [15:0] tmp_reg_192;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln544_fu_129_p1;
wire   [2:0] tmp_32_fu_63_p4;
wire   [7:0] phiQ1_V_fu_59_p1;
wire   [0:0] icmp_ln891_fu_73_p2;
wire   [7:0] phiQ1_V_1_fu_79_p2;
wire   [7:0] phiQ1_V_2_fu_85_p3;
wire   [0:0] icmp_ln891_1_fu_101_p2;
wire   [7:0] phiQ1_V_3_fu_107_p2;
wire   [7:0] select_ln118_fu_113_p3;
wire   [7:0] select_ln887_fu_121_p3;
wire   [31:0] ret_V_fu_165_p2;
wire   [16:0] zext_ln1503_fu_149_p1;
wire   [16:0] sub_ln68_fu_152_p2;
wire   [15:0] ret_V_fu_165_p0;
wire   [15:0] ret_V_fu_165_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;
wire   [31:0] ret_V_fu_165_p00;
wire   [31:0] ret_V_fu_165_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

ProjY_sin_table2 #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sin_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sin_table2_address0),
    .ce0(sin_table2_ce0),
    .q0(sin_table2_q0)
);

jet_hw_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
jet_hw_mul_mul_16ns_16ns_32_1_1_U6(
    .din0(ret_V_fu_165_p0),
    .din1(ret_V_fu_165_p1),
    .dout(ret_V_fu_165_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pt_V_read_reg_172 <= pt_V;
        pt_V_read_reg_172_pp0_iter1_reg <= pt_V_read_reg_172;
        sin_table2_load_reg_187 <= sin_table2_q0;
        tmp_33_reg_177 <= phi_V[32'd10];
        tmp_33_reg_177_pp0_iter1_reg <= tmp_33_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_33_reg_177_pp0_iter2_reg <= tmp_33_reg_177_pp0_iter1_reg;
        tmp_reg_192 <= {{ret_V_fu_165_p2[31:16]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sin_table2_ce0 = 1'b1;
    end else begin
        sin_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((tmp_33_reg_177_pp0_iter2_reg[0:0] === 1'b1) ? sub_ln68_fu_152_p2 : zext_ln1503_fu_149_p1);

assign icmp_ln891_1_fu_101_p2 = (($signed(phi_V) > $signed(11'd1791)) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_73_p2 = (($signed(tmp_32_fu_63_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign phiQ1_V_1_fu_79_p2 = (phiQ1_V_fu_59_p1 ^ 8'd255);

assign phiQ1_V_2_fu_85_p3 = ((icmp_ln891_fu_73_p2[0:0] === 1'b1) ? phiQ1_V_1_fu_79_p2 : phiQ1_V_fu_59_p1);

assign phiQ1_V_3_fu_107_p2 = (phiQ1_V_2_fu_85_p3 ^ 8'd255);

assign phiQ1_V_fu_59_p1 = phi_V[7:0];

assign ret_V_fu_165_p0 = ret_V_fu_165_p00;

assign ret_V_fu_165_p00 = pt_V_read_reg_172_pp0_iter1_reg;

assign ret_V_fu_165_p1 = ret_V_fu_165_p10;

assign ret_V_fu_165_p10 = sin_table2_load_reg_187;

assign select_ln118_fu_113_p3 = ((icmp_ln891_1_fu_101_p2[0:0] === 1'b1) ? phiQ1_V_3_fu_107_p2 : phiQ1_V_2_fu_85_p3);

assign select_ln887_fu_121_p3 = ((tmp_33_fu_93_p3[0:0] === 1'b1) ? select_ln118_fu_113_p3 : phiQ1_V_2_fu_85_p3);

assign sin_table2_address0 = zext_ln544_fu_129_p1;

assign sub_ln68_fu_152_p2 = (17'd0 - zext_ln1503_fu_149_p1);

assign tmp_32_fu_63_p4 = {{phi_V[10:8]}};

assign tmp_33_fu_93_p3 = phi_V[32'd10];

assign zext_ln1503_fu_149_p1 = tmp_reg_192;

assign zext_ln544_fu_129_p1 = select_ln887_fu_121_p3;

endmodule //ProjY
